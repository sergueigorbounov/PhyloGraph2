/**

 * CommandPalette.jsx - A command palette component for quick actions

 */

import React, { useState, useEffect, useRef } from 'react';

import { motion, AnimatePresence } from 'framer-motion';


export default function CommandPalette({ isOpen, onClose, commands = [] }) {

  const [searchQuery, setSearchQuery] = useState('');

  const [activeIndex, setActiveIndex] = useState(0);

  const inputRef = useRef(null);

  

  // Filter commands based on search query

  const filteredCommands = commands.filter(cmd => 

    cmd.title.toLowerCase().includes(searchQuery.toLowerCase()) ||

    (cmd.category && cmd.category.toLowerCase().includes(searchQuery.toLowerCase()))

  );

  

  // Focus input when opened

  useEffect(() => {

    if (isOpen && inputRef.current) {

      setTimeout(() => inputRef.current.focus(), 50);

    } else {

      setSearchQuery('');

      setActiveIndex(0);

    }

  }, [isOpen]);

  

  // Handle keyboard navigation

  const handleKeyDown = (e) => {

    switch (e.key) {

      case 'ArrowDown':

        e.preventDefault();

        setActiveIndex(prev => 

          prev < filteredCommands.length - 1 ? prev + 1 : prev

        );

        break;

      case 'ArrowUp':

        e.preventDefault();

        setActiveIndex(prev => prev > 0 ? prev - 1 : 0);

        break;

      case 'Enter':

        e.preventDefault();

        if (filteredCommands[activeIndex]) {

          executeCommand(filteredCommands[activeIndex]);

        }

        break;

      case 'Escape':

        e.preventDefault();

        onClose();

        break;

    }

  };

  

  const executeCommand = (command) => {

    if (command.action) {

      command.action();

    }

    onClose();

  };

  

  return (

    <AnimatePresence>

      {isOpen && (

        <>

          {/* Backdrop */}

          <motion.div

            initial={{ opacity: 0 }}

            animate={{ opacity: 1 }}

            exit={{ opacity: 0 }}

            className="fixed inset-0 bg-black bg-opacity-50 z-50"

            onClick={onClose}

          />

          

          {/* Command palette */}

          <motion.div

            initial={{ opacity: 0, y: -20 }}

            animate={{ opacity: 1, y: 0 }}

            exit={{ opacity: 0, y: -20 }}

            className="fixed top-[20%] left-1/2 transform -translate-x-1/2 w-[600px] max-w-[90vw] bg-zinc-900 rounded-lg shadow-xl z-50 overflow-hidden"

          >

            {/* Search input */}

            <div className="p-3 border-b border-zinc-700">

              <input

                ref={inputRef}

                type="text"

                value={searchQuery}

                onChange={(e) => {

                  setSearchQuery(e.target.value);

                  setActiveIndex(0);

                }}

                onKeyDown={handleKeyDown}

                placeholder="Type a command..."

                className="w-full bg-zinc-800 rounded px-3 py-2 text-white outline-none"

                autoComplete="off"

              />

            </div>

            

            {/* Command list */}

            <div className="max-h-[50vh] overflow-y-auto">

              {filteredCommands.length > 0 ? (

                <div className="py-2">

                  {filteredCommands.map((command, index) => (

                    <div

                      key={command.id}

                      className={`px-3 py-2 flex justify-between items-center cursor-pointer ${

                        index === activeIndex ? 'bg-zinc-700' : 'hover:bg-zinc-800'

                      }`}

                      onClick={() => executeCommand(command)}

                      onMouseEnter={() => setActiveIndex(index)}

                    >

                      <div className="flex items-center">

                        <span className="text-white">{command.title}</span>

                        {command.category && (

                          <span className="ml-2 px-2 py-0.5 text-xs bg-zinc-800 text-zinc-400 rounded">

                            {command.category}

                          </span>

                        )}

                      </div>

                      {command.shortcut && (

                        <span className="text-xs text-zinc-500 bg-zinc-800 px-2 py-1 rounded">

                          {command.shortcut}

                        </span>

                      )}

                    </div>

                  ))}

                </div>

              ) : (

                <div className="py-8 text-center text-zinc-500">

                  No commands found for "{searchQuery}"

                </div>

              )}

            </div>

          </motion.div>

        </>

      )}

    </AnimatePresence>

  );

}
